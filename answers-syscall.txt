- Looking at the backtrace output, which function called syscall?
	usertrap() in kernel/trap.c.

- What is the value of p->trapframe->a7 and what does that value represent? 
    p->trapframe->a7 equals to 7; it represents syscall "SYS_exec".

- What was the previous mode that the CPU was in?
    from RISCV mannul, we know:
    "The SPP bit indicates the privilege level at which a hart was executing before entering supervisormode. 
    When a trap is taken, SPP is set to 0 if the trap originated from user mode, or 1 otherwise."
    so check reg sstatus: 0x200000022, the SPP bit is 0, indicates the previous mode is user mode.

- Write down the assembly instruction the kernel is panicing at. Which register corresponds to the variable num? 
    asm instruction is: 
    80002052:	00002683          	lw	a3,0(zero) # 0 <_entry-0x80000000>
    reg a3 is corresponded.
    scause 0x000000000000000d
    sepc=0x0000000080002052 stval=0x0000000000000000
     
- Why does the kernel crash? Hint: look at figure 3-3 in the text; is address 0 mapped in the kernel address space? 
  Is that confirmed by the value in scause above? (See description of scause in RISC-V privileged instructions)
    this instruction tries to read value from addresss 0, it is prohibited.
    address 0 does not mapped in kernel address space.
    yes, we can confirme the reason of kernerl crush by check the value of scause.
    in this case, scause is 0xd, represents store access fault.

- What is the name of the binary that was running when the kernel paniced? What is its process id (pid)?
    the name is "initcode"; pid is 1.

    


    
